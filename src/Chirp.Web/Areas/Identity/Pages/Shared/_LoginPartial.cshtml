@using Microsoft.AspNetCore.Identity

@inject SignInManager<Author> SignInManager
@inject UserManager<Author> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <p>User is authenticated.</p>
    <p>User Claims:</p>
    <ul>
        @foreach (var claim in User.Claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}
else
{
    <p>User is not authenticated.</p>
}
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Claims.FirstOrDefault(x => x.Type == System.Security.Claims.ClaimTypes.Name)?.Value!
</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark border-0">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="Register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="Login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
